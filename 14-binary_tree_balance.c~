#include "binary_trees.h"
/**
 * binary_tree_h - Measures the height of a binary tree
 * @tree: Pointer to the root node of the tree to measure the height
 *
 * Return: The height of the binary tree, or 0 if tree is NULL
 */
size_t binary_tree_h(const binary_tree_t *tree)
{
    size_t left_h, right_h = 0;

    if (tree == NULL)
        return (0);

    if (tree->left)
        left_h = 1 + binary_tree_h(tree->left);
    else
        left_h = 1;

    if (tree->right)
        right_h = 1 + binary_tree_h(tree->right);
    else
        right_h = 1;

    return ((left_h > right_h) ? left_h : right_h);
}

/**
 * binary_tree_balance - Measures the balance factor of a binary tree
 * @tree: Pointer to the root node of the tree to measure the balance factor
 *
 * Return: The balance factor of the binary tree, or 0 if tree is NULL
 */
int binary_tree_balance(const binary_tree_t *tree)
{
    int left_b = 0, right_b = 0, balance;

    if (tree == NULL)
        return (0);

    left_b = binary_tree_h(tree->left);
    right_b = binary_tree_h(tree->right);
    balance = left_b - right_b;

    return (balance);
}